service: aws-serverless-auth
custom:
    version: 1.0.0
    appName: aws-serverless-auth
    dbEndpoint:
        Fn::GetAtt: [Database, Endpoint.Address]
    dbPort:
        Fn::GetAtt: [Database, Endpoint.Port]
    webpack:
      webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
      includeModules: true   # Node modules configuration for packaging
      packager: 'npm'   # Packager that will be used to package your external modules
      excludeFiles: test/**/*.js # Provide a glob for files to ignore
    warmup:
        enabled: true # Whether to warm up functions by default or not
        folderName: '_warmup' # Name of the folder created for the generated warmup
        cleanFolder: false
        memorySize: 256
        role: lambdaWarmUpRole
        tags:
          Project: foo
          Owner: bar
        vpc: true
        events:
          - schedule: 'cron(0/5 8-17 ? * MON-FRI *)' # Run WarmUp every 5 minutes Mon-Fri between 8:00am and 5:55pm (UTC)
        timeout: 20
        prewarm: true # Run WarmUp immediately after a deploymentlambda
        payload:
          source: my-custom-source
          other: 20
        concurrency: 5 # Warm up 5 concurrent instances
    alerts:
      topics:
        alarm:
          topic: ${self:service}-${opt:stage}-alerts-alarm
          notifications:
            - protocol: email
              endpoint: ${opt:alert-email}
        alarms:
            - functionErrors
            - functionDuration
            - functionThrottles
plugins:
    - serverless-webpack
    - serverless-offline
    - serverless-plugin-stage-variables
    - serverless-plugin-aws-alerts
    - serverless-plugin-bind-deployment-id
    - serverless-plugin-tracing
    - serverless-plugin-warmup
provider:
    name: aws
    runtime: nodejs8.10
    stage: ${opt:stage}
    memorySize: 512
    tracing: true
    region: us-west-2
    profile: serverless
    environment:
        API_VERSION: ${self:custom.version}
        APP_NAME: ${self:custom.appName}
        DB_HOST: ${opt:DbHost, self:custom.dbEndpoint}
        DB_PORT: ${opt:DbPort, self:custom.dbPort}
        DB_NAME: test
        DB_USER: ${opt:DbUser}
        DB_PWD: ${opt:DbPwd}
        DB_TYPE: mysql
        JWT_HEADER: ${opt:JwtHeader, "x-serverless-auth"} # these aren't used to authentication at this time so included defaults to reduce options in deploy command
        JWT_SECRET: ${opt:JwtSecret, "anything"}
    iamRoleStatements:
        -
            Effect: Allow
            Action: ['xray:PutTraceSegments', 'xray:PutTelemetryRecords']
            Resource: '*'
        -
            Effect: Allow
            Action: ['ec2:CreateNetworkInterface']
            Resource: '*'
        -
            Effect: Allow
            Action: ['apigateway:POST', 'apigateway:PUT', 'apigateway:PATCH', 'apigateway:DELETE', 'apigateway:GET', 'apigateway:HEAD', 'apigateway:OPTIONS']
            Resource: 'arn:aws:execute-api:*:*:ApiGatewayRestApi/*'
        -
            Effect: Allow
            Action: ['s3:GetObject']
            Resource:
              - Fn::GetAtt: [ S3Bucket, Arn ]
              - Fn::Join: ['', [ Fn::GetAtt: [ S3Bucket, Arn ], "/*" ]]
        -
            Effect: Allow
            Action: ['lambda:InvokeFunction']
            Resource:
              - Fn::Join:
                - ':'
                - - arn:aws:lambda
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - function:${self:service}-${opt:stage, self:provider.stage}-*

package:
    excludeDevDependencies: true
    exclude:
        - '.git/**'
        - '.circle/**'
        - 'test/**'
        - 'dist'
        - .gitignore
        - .npmignore
        - tsconfig.json
    include:
        - 'Globals.js'
        - 'apiSpec.json'
functions:
    CreateSession:
        handler: src/index.handler
        events:
            - http:
                path: /v1/users/sessions
                method: post
                cors:
                    origin: '*'
                    headers:
                      - Content-Type
                      - Authorization
                      - x-amzn-trace-id
        warmup:
            enabled:
              - dev
              - staging
              - prod
        environment:
            STAGE: ${opt:stage}
        vpc:
          securityGroupIds:
            - !Ref NoIngressSecurityGroup
          subnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2

    CreateUser:
        handler: src/index.handler
        events:
            - http:
                path: /v1/users
                method: post
                cors:
                    origin: '*'
                    headers:
                      - Content-Type
                      - Authorization
                      - x-amzn-trace-id
        warmup:
          enabled:
            - dev
            - staging
            - prod
        environment:
            STAGE: ${opt:stage}
        vpc:
          securityGroupIds:
            - !Ref NoIngressSecurityGroup
          subnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2

    DefaultRoute:
        handler: src/index.handler
        events:
            - http:
                path: /v1
                method: get
                cors:
                    origin: '*'
                    headers:
                      - Content-Type
                      - Authorization
                      - x-amzn-trace-id
        warmup:
          enabled:
            - dev
            - staging
            - prod
        environment:
            STAGE: ${opt:stage}
        vpc:
          securityGroupIds:
            - !Ref NoIngressSecurityGroup
          subnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2

resources:
    Outputs:
      VPC:
        Description: A reference to the created VPC
        Value: !Ref VPC

      PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

      PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

      PublicSubnet1:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: !Ref PublicSubnet1

      PublicSubnet2:
        Description: A reference to the public subnet in the 2nd Availability Zone
        Value: !Ref PublicSubnet2

      PrivateSubnet1:
        Description: A reference to the private subnet in the 1st Availability Zone
        Value: !Ref PrivateSubnet1

      PrivateSubnet2:
        Description: A reference to the private subnet in the 2nd Availability Zone
        Value: !Ref PrivateSubnet2

      NoIngressSecurityGroup:
        Description: Security group with no ingress rule
        Value: !Ref NoIngressSecurityGroup

      Database:
        Description: RDS instance
        Value: !Ref Database
    Resources:
        ApiGwAccountConfig:
            Type: "AWS::ApiGateway::Account"
            Properties:
              CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"
        ApiGatewayLoggingRole:
          Type: "AWS::IAM::Role"
          Properties:
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Principal:
                    Service:
                      - "apigateway.amazonaws.com"
                  Action: "sts:AssumeRole"
            Path: "/"
            ManagedPolicyArns:
              - !Sub "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
        S3Bucket:
          Type: "AWS::S3::Bucket"
          Properties:
            BucketName: ${self:service}-${opt:stage}-placeholder
        ApiGatewayStage:
              Type: AWS::ApiGateway::Stage
              Properties:
                RestApiId:
                  Ref: "ApiGatewayRestApi"
                DeploymentId:
                  # refer to https://github.com/svdgraaf/serverless-plugin-stage-variables/issues/15 for __deployment__
                  Ref: __deployment__
                MethodSettings:
                  - DataTraceEnabled: true
                    HttpMethod: "*"
                    LoggingLevel: INFO
                    ResourcePath: "/*"
                    MetricsEnabled: true
        #
        # Cloudwatch Alarms
        #
        EventsInvocationsMinAlarm:
          Type: "AWS::CloudWatch::Alarm"
          Properties:
            AlarmName: ${self:service}-${opt:stage}-placeholderInvocationsMin
            Namespace: 'AWS/Lambda'
            MetricName: Invocations
            Threshold: 5
            Statistic: Sum
            Period: 300
            ComparisonOperator: LessThanOrEqualToThreshold
            EvaluationPeriods: 1
            Dimensions:
              -
                Name: "FunctionName"
                Value: ${self:service}-${opt:stage}-placeholder
            AlarmActions:
              - { Ref: "AwsAlertsAlarm" }

        Events4xxErrorsAlarm:
          Type: "AWS::CloudWatch::Alarm"
          Properties:
            AlarmName: ${self:service}-${opt:stage}-placeholder4xxErrors
            Namespace: 'AWS/Gateway'
            MetricName: 4XXError
            Threshold: 5
            Statistic: Sum
            Period: 300
            ComparisonOperator: GreaterThanOrEqualToThreshold
            EvaluationPeriods: 1
            Dimensions:
              -
                Name: "ApiName"
                Value: ${opt:stage}-${self:service}
            AlarmActions:
              - { Ref: "AwsAlertsAlarm" }

        Events5xxErrorsAlarm:
          Type: "AWS::CloudWatch::Alarm"
          Properties:
            AlarmName: ${self:service}-${opt:stage}-placeholder5xxErrors
            Namespace: 'AWS/Gateway'
            MetricName: 5XXError
            Threshold: 5
            Statistic: Sum
            Period: 300
            ComparisonOperator: GreaterThanOrEqualToThreshold
            EvaluationPeriods: 1
            Dimensions:
              -
                Name: "ApiName"
                Value: ${opt:stage}-${self:service}
            AlarmActions:
              - { Ref: "AwsAlertsAlarm" }
        lambdaWarmUpRole:
          Type: AWS::IAM::Role
          Properties:
            Path: /
            RoleName: LambdaWarmUpRole
            AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Principal:
                    Service:
                      - lambda.amazonaws.com
                  Action: sts:AssumeRole
            Policies:
              - PolicyName: LambdaWarmUpPolicy
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Effect: Allow # WarmUp lamda to send logs to CloudWatch
                      Action:
                        - logs:CreateLogGroup
                        - logs:CreateLogStream
                        - logs:PutLogEvents
                      Resource:
                        - 'Fn::Join':
                          - ':'
                          -
                            - 'arn:aws:logs'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'log-group:/aws/lambda/*:*:*'
                    - Effect: Allow # WarmUp lamda to manage ENIS (only needed if deploying to VPC, https://docs.aws.amazon.com/lambda/latest/dg/vpc.html)
                      Action:
                        - ec2:CreateNetworkInterface
                        - ec2:DescribeNetworkInterfaces
                        - ec2:DetachNetworkInterface
                        - ec2:DeleteNetworkInterface
                      Resource: "*"
                    - Effect: 'Allow' # WarmUp lamda to invoke the functions to be warmed
                      Action:
                        - 'lambda:InvokeFunction'
                      Resource:
                      - Fn::Join:
                        - ':'
                        - - arn:aws:lambda
                          - Ref: AWS::Region
                          - Ref: AWS::AccountId
                          - function:${self:service}-${opt:stage, self:provider.stage}-*
        VPC:
          Type: AWS::EC2::VPC
          Properties:
            CidrBlock: ${opt:VpcCIDR, "10.192.0.0/16"}
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
              - Key: Name
                Value: ${self:service}-${opt:stage}-vpc

        InternetGateway:
          Type: AWS::EC2::InternetGateway
          Properties:
            Tags:
              - Key: Name
                Value: ${self:service}-${opt:stage}-InternetGateway

        InternetGatewayAttachment:
          Type: AWS::EC2::VPCGatewayAttachment
          Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

        PublicSubnet1:
          Type: AWS::EC2::Subnet
          Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: ${opt:PublicSubnet1CIDR, "10.192.10.0/24"}
            MapPublicIpOnLaunch: true
            Tags:
              - Key: Name
                Value: !Sub ${self:service}-${opt:stage} Public Subnet (AZ1)

        PublicSubnet2:
          Type: AWS::EC2::Subnet
          Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: ${opt:PublicSubnet2CIDR, "10.192.11.0/24"}
            MapPublicIpOnLaunch: true
            Tags:
              - Key: Name
                Value: !Sub ${self:service}-${opt:stage} Public Subnet (AZ2)

        PrivateSubnet1:
          Type: AWS::EC2::Subnet
          Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: ${opt:PrivateSubnet1CIDR, "10.192.20.0/24"}
            MapPublicIpOnLaunch: false
            Tags:
              - Key: Name
                Value: !Sub ${self:service}-${opt:stage} Private Subnet (AZ1)

        PrivateSubnet2:
          Type: AWS::EC2::Subnet
          Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: ${opt:PrivateSubnet2CIDR, "10.192.21.0/24"}
            MapPublicIpOnLaunch: false
            Tags:
              - Key: Name
                Value: !Sub ${self:service}-${opt:stage} Private Subnet (AZ2)

        Database:
          Type: AWS::RDS::DBInstance
          Properties:
            DBName: test
            AllocatedStorage: '20'
            DBInstanceClass: db.t2.micro
            Engine: mysql
            EngineVersion: "5.7.21"
            MasterUsername: ${opt:DbUser}
            MasterUserPassword: ${opt:DbPwd}
            DBSubnetGroupName: !Ref DBSubnetGroup
            VPCSecurityGroups:
              - Ref: DatabaseVpcSecurityGroup

        DBSubnetGroup:
          Type: "AWS::RDS::DBSubnetGroup"
          Properties:
            DBSubnetGroupName: ${self:service}-${opt:stage} Private DB Subnet Group
            DBSubnetGroupDescription: ${self:service}-${opt:stage} Private DB Subnet Group
            SubnetIds:
              - Ref: PrivateSubnet1
              - Ref: PrivateSubnet2

        DatabaseVpcSecurityGroup:
          Type: "AWS::EC2::SecurityGroup"
          Properties:
            GroupName: DBSecurityGroup
            GroupDescription: Allow local access
            SecurityGroupIngress:
                IpProtocol: tcp
                FromPort: 3306
                ToPort: 3306
                SourceSecurityGroupId : !Ref NoIngressSecurityGroup
            VpcId: !Ref VPC

        NatGateway1EIP:
          Type: AWS::EC2::EIP
          DependsOn: InternetGatewayAttachment
          Properties:
            Domain: vpc

        NatGateway2EIP:
          Type: AWS::EC2::EIP
          DependsOn: InternetGatewayAttachment
          Properties:
            Domain: vpc

        NatGateway1:
          Type: AWS::EC2::NatGateway
          Properties:
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

        NatGateway2:
          Type: AWS::EC2::NatGateway
          Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

        PublicRouteTable:
          Type: AWS::EC2::RouteTable
          Properties:
            VpcId: !Ref VPC
            Tags:
              - Key: Name
                Value: !Sub ${self:service}-${opt:stage} Public Routes

        DefaultPublicRoute:
          Type: AWS::EC2::Route
          DependsOn: InternetGatewayAttachment
          Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

        PublicSubnet1RouteTableAssociation:
          Type: AWS::EC2::SubnetRouteTableAssociation
          Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

        PublicSubnet2RouteTableAssociation:
          Type: AWS::EC2::SubnetRouteTableAssociation
          Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2


        PrivateRouteTable1:
          Type: AWS::EC2::RouteTable
          Properties:
            VpcId: !Ref VPC
            Tags:
              - Key: Name
                Value: !Sub ${self:service}-${opt:stage} Private Routes (AZ1)

        DefaultPrivateRoute1:
          Type: AWS::EC2::Route
          Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

        PrivateSubnet1RouteTableAssociation:
          Type: AWS::EC2::SubnetRouteTableAssociation
          Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

        PrivateRouteTable2:
          Type: AWS::EC2::RouteTable
          Properties:
            VpcId: !Ref VPC
            Tags:
              - Key: Name
                Value: !Sub ${self:service}-${opt:stage} Private Routes (AZ2)

        DefaultPrivateRoute2:
          Type: AWS::EC2::Route
          Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

        PrivateSubnet2RouteTableAssociation:
          Type: AWS::EC2::SubnetRouteTableAssociation
          Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

        NoIngressSecurityGroup:
          Type: AWS::EC2::SecurityGroup
          Properties:
            GroupName: "no-ingress-sg"
            GroupDescription: "Security group with no ingress rule"
            VpcId: !Ref VPC
